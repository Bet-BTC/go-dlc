// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import btcjson "github.com/btcsuite/btcd/btcjson"
import chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
import mock "github.com/stretchr/testify/mock"

import wire "github.com/btcsuite/btcd/wire"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ImportAddress provides a mock function with given fields: address
func (_m *Client) ImportAddress(address string) error {
	ret := _m.Called(address)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUnspent provides a mock function with given fields:
func (_m *Client) ListUnspent() ([]btcjson.ListUnspentResult, error) {
	ret := _m.Called()

	var r0 []btcjson.ListUnspentResult
	if rf, ok := ret.Get(0).(func() []btcjson.ListUnspentResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]btcjson.ListUnspentResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRawTransaction provides a mock function with given fields: tx, allowHighFees
func (_m *Client) SendRawTransaction(tx *wire.MsgTx, allowHighFees bool) (*chainhash.Hash, error) {
	ret := _m.Called(tx, allowHighFees)

	var r0 *chainhash.Hash
	if rf, ok := ret.Get(0).(func(*wire.MsgTx, bool) *chainhash.Hash); ok {
		r0 = rf(tx, allowHighFees)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chainhash.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wire.MsgTx, bool) error); ok {
		r1 = rf(tx, allowHighFees)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
