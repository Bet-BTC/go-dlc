// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import btcec "github.com/btcsuite/btcd/btcec"
import btcutil "github.com/btcsuite/btcutil"
import mock "github.com/stretchr/testify/mock"
import waddrmgr "github.com/btcsuite/btcwallet/waddrmgr"
import wallet "github.com/dgarage/dlc/internal/wallet"

// Wallet is an autogenerated mock type for the Wallet type
type Wallet struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Wallet) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: scope, name, privPass
func (_m *Wallet) CreateAccount(scope waddrmgr.KeyScope, name string, privPass []byte) (uint32, error) {
	ret := _m.Called(scope, name, privPass)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(waddrmgr.KeyScope, string, []byte) uint32); ok {
		r0 = rf(scope, name, privPass)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(waddrmgr.KeyScope, string, []byte) error); ok {
		r1 = rf(scope, name, privPass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUnspent provides a mock function with given fields:
func (_m *Wallet) ListUnspent() ([]wallet.Utxo, error) {
	ret := _m.Called()

	var r0 []wallet.Utxo
	if rf, ok := ret.Get(0).(func() []wallet.Utxo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wallet.Utxo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPubkey provides a mock function with given fields:
func (_m *Wallet) NewPubkey() (*btcec.PublicKey, error) {
	ret := _m.Called()

	var r0 *btcec.PublicKey
	if rf, ok := ret.Get(0).(func() *btcec.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*btcec.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWitnessPubkeyScript provides a mock function with given fields:
func (_m *Wallet) NewWitnessPubkeyScript() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUnspent provides a mock function with given fields: amt, feePerTxIn, feePerTxOut
func (_m *Wallet) SelectUnspent(amt btcutil.Amount, feePerTxIn btcutil.Amount, feePerTxOut btcutil.Amount) ([]wallet.Utxo, btcutil.Amount, error) {
	ret := _m.Called(amt, feePerTxIn, feePerTxOut)

	var r0 []wallet.Utxo
	if rf, ok := ret.Get(0).(func(btcutil.Amount, btcutil.Amount, btcutil.Amount) []wallet.Utxo); ok {
		r0 = rf(amt, feePerTxIn, feePerTxOut)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wallet.Utxo)
		}
	}

	var r1 btcutil.Amount
	if rf, ok := ret.Get(1).(func(btcutil.Amount, btcutil.Amount, btcutil.Amount) btcutil.Amount); ok {
		r1 = rf(amt, feePerTxIn, feePerTxOut)
	} else {
		r1 = ret.Get(1).(btcutil.Amount)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(btcutil.Amount, btcutil.Amount, btcutil.Amount) error); ok {
		r2 = rf(amt, feePerTxIn, feePerTxOut)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
